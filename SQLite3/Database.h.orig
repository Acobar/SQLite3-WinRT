#pragma once

#include "sqlite3.h"
#include "Common.h"

namespace SQLite3 {
  public delegate int ProgressHandler(Platform::Object^ source);

  public value struct ChangeEvent {
    Platform::String^ TableName;
    __int64 Rowid;
  };

  public delegate void ChangeHandler(ChangeEvent source);

  public ref class Database sealed {
  public:
    static IAsyncOperation<Database^>^ OpenAsync(Platform::String^ dbPath);
    ~Database();

    IAsyncAction^ RunAsync(Platform::String^ sql, Parameters^ params);
    IAsyncOperation<Row^>^ OneAsync(Platform::String^ sql, Parameters^ params);
    IAsyncOperation<Rows^>^ AllAsync(Platform::String^ sql, Parameters^ params);
    IAsyncAction^ EachAsync(Platform::String^ sql, Parameters^ params, EachCallback^ callback);

    event ProgressHandler^ progress;
    event ChangeHandler^ updated;
    event ChangeHandler^ deleted;
    event ChangeHandler^ inserted;

  private:
<<<<<<< Updated upstream
    Database(sqlite3* sqlite);
    StatementPtr PrepareAndBind(Platform::String^ sql, const SafeParameters& params);
=======
    Database(sqlite3* sqlite, Windows::UI::Core::CoreDispatcher^ dispatcher);

    template <typename ParameterContainer>
    StatementPtr PrepareAndBind(Platform::String^ sql, ParameterContainer params);

    template <typename ParameterContainer>
    IAsyncAction^ RunAsync(Platform::String^ sql, ParameterContainer params);
    template <typename ParameterContainer>
    IAsyncOperation<Row^>^ OneAsync(Platform::String^ sql, ParameterContainer params);
    template <typename ParameterContainer>
    IAsyncOperation<Rows^>^ AllAsync(Platform::String^ sql, ParameterContainer params);
    template <typename ParameterContainer>
    IAsyncAction^ EachAsync(Platform::String^ sql, ParameterContainer params, EachCallback^ callback);
>>>>>>> Stashed changes

    static int __cdecl progressCallback(void* data);
    int OnProgress();

    static void __cdecl updateHook(void* data, int what, char const* databaseName, char const* tableName, sqlite3_int64 rowid);
    void OnChange(int what, char const* databaseName, char const* tableName, sqlite3_int64 rowid);
        
    Windows::UI::Core::CoreDispatcher^ dispatcher;

    sqlite3* sqlite;
  };
}
